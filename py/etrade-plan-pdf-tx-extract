#!/usr/bin/env python3

"""
A convenience script to extract transactions from PDFs downloaded from us.etrade.com
"""
import argparse
import csv
from dataclasses import dataclass
import datetime
from decimal import Decimal
from functools import partial
import inspect
import io
import itertools
from os.path import basename
from pprint import pprint
import re
import sys
from typing import Any, Optional, Union
from txlib import AcbCsvRenderer, Action, Tx

import PyPDF2

_debug = False

def frame_name(n: int = 0) -> str:
   def _frame_name(frame, n_: int) -> str:
      if n_ == 0:
         # Extract the name of the function from the frame
         return frame.f_code.co_name
      else:
         parent_frame = frame.f_back
         # Recurse up the stackframe
         return _frame_name(parent_frame, n_ - 1)

   # Get the current stack frame
   frame = inspect.currentframe()
   try:
      return _frame_name(frame, n+1)
   finally:
      # Explicitly delete to avoid reference cycles (?)
      del frame

def debug(*args):
   if _debug:
      print(*args, file=sys.stderr)
      sys.stderr.flush()

def fdebug(*args):
   if _debug:
      print(f"{frame_name(1)}:", *args)

def ppdebug(obj):
   if _debug:
      pprint(obj, stream=sys.stderr)
      sys.stderr.flush()

@dataclass
class BenefitEntry:
   security: str

   acquire_tx_date: datetime.date
   acquire_settle_date: datetime.date
   acquire_share_price: Decimal
   acquire_shares: int

   sell_to_cover_tx_date: Optional[datetime.date]
   sell_to_cover_settle_date: Optional[datetime.date]
   sell_to_cover_price: Optional[Decimal]
   sell_to_cover_shares: Optional[int]
   sell_to_cover_fee: Optional[Decimal]

   plan_note: str
   sell_note: Optional[str] = None
   filename: Optional[str] = None

@dataclass
class TradeConfirmation:
   security: str
   action: Action
   tx_date: datetime.date
   settle_date: datetime.date
   shares: int
   amount_per_share: float
   commission: float
   fee: float
   filename: str

   def total_commission(self) -> float:
      return self.commission + self.fee

   def __hash__(self):
      return hash(repr(self))

def mustStrptime(d: Optional[str], fmt: str) -> datetime.datetime:
   assert d
   return datetime.datetime.strptime(d, fmt)

def mustFloat(d: Optional[Decimal]) -> float:
   assert d is not None
   return float(d)

def mustInt(d: Optional[int]) -> int:
   assert d is not None
   return d

def make_tx_renderer(benefits: list[BenefitEntry], remaining_trades:list[TradeConfirmation]):
   renderer = AcbCsvRenderer()
   for row, b in enumerate(benefits):
      buy_tx = Tx(
            security=b.security,
            trade_date=Tx.date_to_str(b.acquire_tx_date),
            settlement_date=Tx.date_to_str(b.acquire_settle_date),
            trade_date_and_time=Tx.date_to_str(b.acquire_tx_date),
            settlement_date_and_time=Tx.date_to_str(b.acquire_settle_date),
            action=Action.BUY,
            amount_per_share=float(b.acquire_share_price),
            num_shares=b.acquire_shares,
            commission=0.0,
            currency='USD',
            affiliate='',
            row_num=row+1,
            memo=b.plan_note,
            exchange_rate=None,
         )

      renderer.txs.append(buy_tx)

      # Keys here are human-readable
      sell_to_cover_attrs = {
         "trade date": b.sell_to_cover_tx_date,
         "settlement date": b.sell_to_cover_settle_date,
         "shares sold": b.sell_to_cover_shares,
         "price": b.sell_to_cover_price,
         "fee": b.sell_to_cover_fee,
      }

      if any(v is not None for v in sell_to_cover_attrs.values()):
         if not all(v is not None for v in sell_to_cover_attrs.values()):
            stcInfo = ', '.join(f"{k}: {v}" for k, v in sell_to_cover_attrs.items())
            print("Error: Some, but not all, sell-to-cover fields were found for "
                  f"{b.acquire_shares} shares of {b.security} aquired on {b.acquire_tx_date}. "
                  f"StC {stcInfo}",
                  file=sys.stderr)
            exit(1)

         sell_note = b.sell_note or "sell-to-cover"
         sell_tx = Tx(
               security=b.security,
               trade_date=Tx.date_to_str(b.sell_to_cover_tx_date),
               settlement_date=Tx.date_to_str(b.sell_to_cover_settle_date),
               trade_date_and_time=Tx.date_to_str(b.sell_to_cover_tx_date),
               settlement_date_and_time=Tx.date_to_str(b.sell_to_cover_settle_date),
               action=Action.SELL,
               amount_per_share=mustFloat(b.sell_to_cover_price),
               num_shares=mustInt(b.sell_to_cover_shares),
               commission=mustFloat(b.sell_to_cover_fee),
               currency='USD',
               affiliate='',
               row_num=row+1,
               memo=f"{b.plan_note} {sell_note}",
               exchange_rate=None,
            )

         renderer.txs.append(sell_tx)

   row = len(benefits) + 1
   for trade in remaining_trades:
      tx = Tx(
            security=trade.security,
            trade_date=Tx.date_to_str(trade.tx_date),
            settlement_date=Tx.date_to_str(trade.settle_date),
            trade_date_and_time=Tx.date_to_str(trade.tx_date),
            settlement_date_and_time=Tx.date_to_str(trade.settle_date),
            action=trade.action,
            amount_per_share=float(trade.amount_per_share),
            num_shares=trade.shares,
            commission=trade.total_commission(),
            currency='USD',
            affiliate='',
            row_num=row,
            memo=f"manual trade",
            exchange_rate=None,
         )
      row += 1

      renderer.txs.append(tx)

   renderer.sort_txs()
   return renderer

class ReSearchError(Exception):
   pass

def search_for_group(pattern, text, flags=0, group=1, optional=False):
   m = re.search(pattern, text, flags=flags)
   if m:
      return m.group(group)
   else:
      if optional:
         return None
      raise ReSearchError(f"Could not find {repr(pattern)}")

def search_for_decimal(pattern, text, flags=0, group=1, optional=False):
   val_str = search_for_group(pattern, text,
                              flags=flags, group=group, optional=optional)
   if val_str:
      return Decimal(val_str.replace(',', ''))
   return None

def search_for_row(key: str, val_pat: str, text: str) -> list[Any]:
   mainPattern = key + rf"(?:\s+(?P<rowvalue>{val_pat}(?:\s+{val_pat})?))"

   ret = []
   for m in re.finditer(mainPattern, text):
      val = m.group("rowvalue")
      ret += list(re.findall(val_pat, val))
   if not ret:
      raise ReSearchError(f"Could not find {repr(mainPattern)}")
   return ret

def text_to_common_data(text: str) -> dict:
   return {
      "employee id": search_for_group(r"Employee ID:\s*(\d+)", text),
      "account number": search_for_group(r"Account (?:Number|Stock Plan \(\S+\) -)\s*(\d+)", text),
      "symbol": search_for_group(r"Company Name\s*\(Symbol\)*.*\(([A-Za-z\.]+)\)", text, re.S),
   }

def text_to_rsu_data(text: str) -> dict:
   return text_to_common_data(text) | {
      "release date": mustStrptime(
         search_for_group(r"Release Date\s*(\d+-\d+-\d+)", text), "%m-%d-%Y"
      ).date(),
      "award number": search_for_group(r"Award Number\s*(R\d+)", text),
      "share released": search_for_decimal(r"Shares Released\s*(\d+\.\d+)", text),
      "share sold": search_for_decimal(r"Shares Sold\s*\((\d+\.\d+)\)", text),
      "share issued": search_for_decimal(r"Shares Issued\s*(\d+\.\d+)", text),
      "FMV": search_for_decimal(r"Market Value Per Share\s*\$(\d+\.\d+)", text),
      "sale price": search_for_decimal(r"Sale Price Per Share\s*\$(\d+\.\d+)", text),
      "market value": search_for_decimal(r"Market Value\s*\$([\d,]+\.\d+)", text),
      "total sale price": search_for_decimal(r"Total Sale Price\s*\$([\d,]+\.\d+)", text),
      "total tax": search_for_decimal(r"Total Tax\s*\$([\d,]+\.\d+)", text),
      "fee": search_for_decimal(r"Fee\s*\(\$(\d+\.\d+)", text),
      "cash leftover": search_for_decimal(r"Total Due Participant\s*\$([\d,]+\.\d+)", text),
   }

def text_to_rsu_entry(text: str, filename: str) -> BenefitEntry:
   data = text_to_rsu_data(text)
   return BenefitEntry(
         security=data['symbol'],

         # The FMV is for the release date, so treat that as the tx date.
         acquire_tx_date=data['release date'],
         # There is no way to know the settlement date in RSU distributions.
         # Since they are never near the year-end boundary, just use the release date.
         acquire_settle_date=data['release date'],
         acquire_share_price=data['FMV'],
         acquire_shares=int(data['share released']),

         # The sell-to-cover date is almost always a day or two after the release
         # date. This needs to be looked up separately if we want an accurate
         # USD/CAD exchange rate.
         sell_to_cover_tx_date=data['release date'],
         sell_to_cover_settle_date=None,
         sell_to_cover_price=data['sale price'],
         sell_to_cover_shares=int(data['share sold']),
         sell_to_cover_fee=data['fee'],

         plan_note="RSU " + data['award number'],
         filename=filename,
      )

def mustMatchAndReplace(d: Optional[str], old: str, new: str)->str:
   assert d is not None
   return d.replace(old, new)

def text_to_eso_entries(text: str, filename: str) -> list[BenefitEntry]:
   exc_type = search_for_group(r"Exercise Type:\s+(.*)\s+Registration", text)
   ppdebug(text)
   debug("Exercise Type:", exc_type)
   if exc_type != "Same-Day Sale":
      raise ParseError(f"Unknown exercise type {exc_type!r}")

   entries : list[BenefitEntry] = []
   common = text_to_common_data(text)
   debug("common:")
   ppdebug(common)
   txdate = mustStrptime(
      search_for_group(r"Exercise Date:\s+(\d+/\d+/\d+)", text),
      '%m/%d/%Y',
   ).date()

   mbody = re.search("Exercise Details.*Exercise Date", text,re.S)
   assert mbody

   head = text[:mbody.start()]
   text = text[mbody.start():]

   grants = re.findall(r"Grant (\d+)", text)
   debug("Grants:", grants)

   grant_nums = search_for_row("Grant Number", r"(\d+)", text)
   match = partial(search_for_row, text=text)
   fmvs = match("Exercise Market Value", r"\$(\d+\.\d+)")
   exc_count = match("Shares Exercised", r"\d+")
   sell_count = int(mustMatchAndReplace(search_for_group(r"Shares Sold\s+([\d,]+)", head), ",", ""))
   sell_prices = match("Sale Price", r"\$(\d+\.\d+)")
   fees = match("Comission/Fee", r"\$(\d+\.\d+)")

   debug("sell_count:", sell_count)
   def makeDecimal(v: str) -> Decimal:
      return Decimal(v.replace(",", ""))

   def _equal(v:  list[str]) -> str:
      assert len(set(v)) == 1, f"mismatched values in {v!r}"
      assert len(v) == len(grants), f"v: {v}, grants: {grants}"
      return v[0]

   def _sum(v: list[str]) -> Decimal:
      assert len(v) == len(grants), f"v: {v}, grants: {grants}"
      result = sum(map(makeDecimal, v))
      if result == 0:
         return Decimal(0)
      return result

   ppdebug(grant_nums)
   ppdebug(fmvs)
   for idx, _ in enumerate(grants):
      ent = BenefitEntry(
         security=common['symbol'],
         acquire_tx_date=txdate,
         acquire_settle_date=txdate,
         acquire_share_price=makeDecimal(fmvs[idx]),
         acquire_shares=int(exc_count[idx]),

         sell_to_cover_tx_date=None,
         sell_to_cover_settle_date=None,
         sell_to_cover_price=None,
         sell_to_cover_shares=None,
         sell_to_cover_fee=None,

         plan_note=f"Option Grant {grant_nums[idx]}",
         sell_note=exc_type,
         filename=filename,
      )
      if idx == len(grant_nums) - 1:
         ent.sell_to_cover_tx_date = txdate
         ent.sell_to_cover_settle_date = txdate
         ent.sell_to_cover_price = makeDecimal(_equal(sell_prices))
         ent.sell_to_cover_shares = sell_count
         ent.sell_to_cover_fee = _sum(fees)
      entries.append(ent)

   return entries

def text_to_espp_data(text) -> dict:
   return text_to_common_data(text) | {
      "purchase date": mustStrptime(
         search_for_group(r"Purchase Date\s*(\d+-\d+-\d+)", text), "%m-%d-%Y"
      ).date(),
      "share purchased": search_for_decimal(r"Shares Purchased\s*(\d+\.\d+)", text),
      "share sold":
         search_for_decimal(r"Shares Sold to Cover Taxes\s*(\d+\.\d+)", text, optional=True),
      "FMV":
         search_for_decimal(r"Purchase Value per Share\s*\$(\d+\.\d+)", text),
      "purchase price":
         search_for_decimal(
            r"Purchase Price per Share\s*\([^\)]*\)\s*\$(\d+\.\d+)", text, re.S
         ),
      "total price": search_for_decimal(r"Total Price\s*\(\$([\d,]+\.\d+)\)", text),
      "total value": search_for_decimal(r"Total Value\s*\$([\d,]+\.\d+)", text),
      "taxable gain": search_for_decimal(r"Taxable Gain\s*\$([\d,]+\.\d+)", text),
      "sale price": search_for_decimal(
            r"Sale Price for Shares Sold to Cover Taxes\s*\$(\d+\.\d+)", text,
            optional=True,
         ),
      "fee": search_for_decimal(r"Fees\s*\(\$(\d+\.\d+)", text, optional=True),
      "total sale price": search_for_decimal(
         r"Value Of Shares Sold\s\$([\d,]+\.\d+)", text, optional=True),
      "market value at grant":
         search_for_decimal(r"Market Value\s*\$([\d,]+\.\d+)", text),
      "cash leftover":
         search_for_decimal(r"Amount in Excess of Tax Due\s\$(\d+\.\d+)", text, optional=True),
      "total tax": search_for_decimal(
         r"Total Taxes Collected at purchase\s\(\$([\d,]+\.\d+)\)", text,
         optional=True),
   }

def text_to_espp_entry(text: str, filename: str) -> BenefitEntry:
   data = text_to_espp_data(text)
   return BenefitEntry(
         security=data['symbol'],

         acquire_tx_date=data['purchase date'],
         # There is no way to know the settlement date in ESPP distributions.
         # Since they are never near the year-end boundary, just use the purchase date.
         acquire_settle_date=data['purchase date'],
         acquire_share_price=data['FMV'],
         acquire_shares=int(data['share purchased']),

         # The sell-to-cover date is almost always a day or two after the release
         # date. This needs to be looked up separately if we want an accurate
         # USD/CAD exchange rate.
         sell_to_cover_tx_date=None,
         sell_to_cover_settle_date=None,
         sell_to_cover_price=data['sale price'],
         sell_to_cover_shares=int(data['share sold']) if data['share sold'] else None,
         sell_to_cover_fee=data['fee'],

         plan_note="ESPP",
         filename=filename,
      )

def re_group_or(match, group_name:str, default):
   if match.group(group_name) is None:
      return default
   return match.group(group_name)

def old_etrade_text_to_trade_confirmation_objs(text: str, filename: str) -> list[TradeConfirmation]:
   """
   Trade confirmation form before Morgan Stanley aquired ETRADE
   (mid 2023 and before)
   """
   ms = re.finditer(r'(?P<txdate>\d+/\d+/\d+)\s+(?P<sdate>\d+/\d+/\d+)\s+(?P<cpt>\d+)\s+'
                    r'(?P<sym>\S+)\s+(?P<act>\S+)\s+(?P<nshares>\d+)\s+\$(?P<price>\d+\.\d+)[^\n]*\n'
                    r'[^\n]*(COMMISSION\s+\$(?P<commission>\d+\.\d+)[^\n]*\n)?'
                    r'[^\n]*(FEE\s+\$(?P<fee>\d+\.\d+)[^\n]*\n)?'
                    r'[^\n]*NET\s+AMOUNT',
                    text)

   objs = []
   for m in ms:
      objs.append(TradeConfirmation(
            security=m.group('sym'),
            action=Action(m.group('act')),
            tx_date=datetime.datetime.strptime(m.group('txdate'), '%m/%d/%y').date(),
            settle_date=datetime.datetime.strptime(m.group('sdate'), '%m/%d/%y').date(),
            shares=int(m.group('nshares')),
            amount_per_share=float(m.group('price')),
            commission=float(re_group_or(m, 'commission', '0')),
            fee=float(re_group_or(m, 'fee', '0')),
            filename=filename,
         ))
   return objs

def ms_etrade_text_to_trade_confirmation_objs(text: str, filename: str) -> list[TradeConfirmation]:
   """Trade confirmation form after Morgan Stanley aquired ETRADE (2023)"""
   m = re.search(r'Trade\s+Date\s+Settlement\s+Date\s+Quantity\s+Price\s+Settlement\s+Amount\s+'
                 r'(?P<txdate>\d+/\d+/\d+)\s+(?P<sdate>\d+/\d+/\d+)\s+(?P<nshares>\d+)\s+'
                 r'(?P<price>\d+\.\d+)\s+'
                 r'Transaction\s+Type:\s*(?P<act>\S+)\s*'
                 r'Description.*\n.*ISIN:\s*(?P<sym>\S+)'
                 r'([\s\S]*Commission\s+\$(?P<commission>\d+\.\d+))?'
                 r'([\s\S]*Transaction\s+Fee\s+\$(?P<fee>\d+\.\d+))?',
                 text)
   if m:
      action = None
      if m.group('act') == 'Sold':
         action = Action.SELL
      elif m.group('act') == 'Bought':
         action = Action.BUY
      else:
         print(f"Error in MS ETRADE trade confirmation PDF: unrecognized action '{m.group('act')}'",
               file=sys.stderr)
         exit(1)
      return [TradeConfirmation(
            security=m.group('sym'),
            action=action,
            tx_date=datetime.datetime.strptime(m.group('txdate'), '%m/%d/%Y').date(),
            settle_date=datetime.datetime.strptime(m.group('sdate'), '%m/%d/%Y').date(),
            shares=int(m.group('nshares')),
            amount_per_share=float(m.group('price')),
            commission=float(re_group_or(m, 'commission', '0')),
            fee=float(re_group_or(m, 'fee', '0')),
            filename=filename,
         )]
   return []

class ParseError( Exception ):
   pass

def parse_pdf(f: io.BufferedReader, fname: str) -> Union[list[BenefitEntry], list[TradeConfirmation]]:
   reader = PyPDF2.PdfReader(f)
   text = reader.pages[0].extract_text()

   fdebug("Extracted PDF text:")
   ppdebug(text)

   try:
      if re.search(r'STOCK\s+PLAN\s+RELEASE\s+CONFIRMATION', text):
         obj = [text_to_rsu_entry(text, f.name)]
      elif re.search(r'STOCK\s+PLAN\s+EXERCISE\s+CONFIRMATION', text):
         obj = text_to_eso_entries(text, f.name)
      elif re.search(r'Plan\s*(2014|ESP2)', text):
         obj = [text_to_espp_entry(text, f.name)]
      elif re.search(r'TRADE\s*CONFIRMATION', text):
         # Original independent ETRADE trade confirmation.
         debug("trade confirmation")
         obj = old_etrade_text_to_trade_confirmation_objs(text, f.name)
         if not obj:
            raise ParseError(f"could not find any trade confirmations in old ETRADE PDF {fname}")
      elif re.search(r'This\s+transaction\s+is\s+confirmed', text):
         # Updated Morgan Stanley trade confirmation document
         obj = ms_etrade_text_to_trade_confirmation_objs(text, f.name)
         if not obj:
            raise ParseError( f"could not find any trade confirmations in MS/ETRADE PDF {fname}" )
      else:
         raise ParseError( f"cannot categorize layout of PDF {fname}" )

   except (ReSearchError, ParseError) as error:
      print(f"Error: etrade-plan-pfd-tx-extract {fname!r}: {error}.\n"
            "       Script may require updating. Run with --debug to show extracted text.",
            file=sys.stderr)
      exit(1)

   if _debug:
      pprint(obj)

   return obj

def find_and_apply_sell_to_cover_trade_set(benefit: BenefitEntry, trade_confs: list[TradeConfirmation]):
   matching_trades = None
   errors = []
   for n in range(len(trade_confs), 0, -1):
      for trades in itertools.combinations(trade_confs, n):
         if not all(t.security == benefit.security for t in trades):
            continue
         n_shares = sum(t.shares for t in trades)
         if n_shares == benefit.sell_to_cover_shares:
            if matching_trades is not None:
               if set(matching_trades) != set(trades):
                  errors.append(f"Error: Multiple trade combinations near {benefit.acquire_tx_date} "
                                f"could potentially constitute the sale {benefit.filename}")
                  matching_trades = None
                  break
               # If these are basically equivalent sets of trades, just skip.
               # This is most likely to happen when multiple sells get split into X and 1.
            else:
               matching_trades = trades

   if not matching_trades and errors:
      for e in errors:
         print(e, file=sys.stderr)
      return []

   if matching_trades:
      matching_trades = sorted(matching_trades, key=lambda t: t.tx_date)
      t0 = matching_trades[0]
      for t in matching_trades[1:]:
         if t.tx_date != t0.tx_date or t.settle_date != t0.settle_date:
            print("Warning: sell-to-cover trades have varrying dates:",
                  file=sys.stderr)
            for t_ in matching_trades:
               pprint(t_, stream=sys.stderr)
      benefit.sell_to_cover_tx_date=t0.tx_date
      benefit.sell_to_cover_settle_date=t0.settle_date
      fdebug("Found matching trade confirmations for benefit:")
      ppdebug(benefit)
      for t in matching_trades:
         ppdebug(t)
      return matching_trades
   else:
      fn = f"{basename(benefit.filename)}: " if benefit.filename else ""
      print("Error: Found no trades matching the sell-to-cover for "
            f"{fn}{benefit.plan_note} {benefit.acquire_tx_date}", file=sys.stderr)
      fdebug("Candidates:")
      for t in trade_confs:
         ppdebug(t)
      return []

def amend_benefit_sales(benefits: list[BenefitEntry], trade_confs: list[TradeConfirmation]):
   trade_confs = list(trade_confs) # Make a a copy
   for benefit in benefits:
      # Find the sale(s) which could constitute this sell-to-cover
      latest_day = benefit.acquire_tx_date + datetime.timedelta(days=5)
      candidate_trades = []
      for trade in trade_confs:
         if trade.action == Action.SELL and \
            benefit.acquire_tx_date <= trade.tx_date and trade.tx_date <= latest_day:
            candidate_trades.append(trade)

      matched_trades = find_and_apply_sell_to_cover_trade_set(benefit, candidate_trades)
      for t in matched_trades:
         trade_confs.remove(t)

   # Return leftover trades
   return trade_confs

def main():
   ap = argparse.ArgumentParser(description="""\
Instructions:
Go to us.etrade.com, log into your account, and go to 'At Work', then to
'Holdings'. In ESPP and RS sections, click 'Benefit History'. Expand each relevant
section, and donwload (right-click and 'save link as') each
'View confirmation of purchase' or 'View confirmation of release' link PDF.

Then go to 'Account', then 'Documents' > 'Trade Confirmations.' Adjust the date
range, and download the trade confirmation PDF for each sale.
Note: For sales on the same day, both appear on the same PDF. The download link
for both sales is to the same document, so only one needs to be downloaded.

Run this script, giving the name of all PDFs as arguments.""",
         formatter_class=argparse.RawDescriptionHelpFormatter,)
   ap.add_argument('files', metavar='FILES', nargs='+')
   ap.add_argument('--pretty', action='store_true')
   ap.add_argument('--debug', action='store_true')
   ap.add_argument('--extract-only', action='store_true')
   args = ap.parse_args()

   global _debug
   _debug = args.debug

   benefits: list[BenefitEntry] = []
   trade_confs: list[TradeConfirmation] = []
   first = True
   for fname in sorted(args.files):
      if not first:
         debug()
      first = False
      debug("Parsing ", fname)
      with open(fname, 'rb') as f:
         try:
            obj = parse_pdf(f, fname)
            for o in obj:
               if isinstance(o, BenefitEntry):
                  benefits.append(o)
               elif isinstance(o, TradeConfirmation):
                  trade_confs.append(o)
               else:
                  raise ParseError(f"parse_pdf produced a result of type {type(o)}, which is not recognized")
         except (ReSearchError, ParseError) as e:
            print(f"Error parsing {fname}: {e}", file=sys.stderr)
            return 1

   if args.extract_only:
      for desc, collection in (
            ("trades", trade_confs),
            ("benefits", benefits),
      ):
         header: Optional[list[str]] = None
         rows: list[list[str]] = []
         for entry in collection:
            if header is None:
               header = list(entry.__match_args__)
            rows.append([getattr(entry, k) for k in header])
         if header is None:
            print("WARN: No", desc, "entries", file=sys.stderr)
            continue
         sys.stdout.flush()
         writer = csv.writer(sys.stdout, delimiter=',', quoting=csv.QUOTE_MINIMAL)
         writer.writerow(header)
         for row in rows:
            writer.writerow(row)
      return

   remaining_trades = amend_benefit_sales(benefits, trade_confs)
   debug("\nAmmended benefit entries:")
   for b in benefits:
      ppdebug(b)
   debug("\nRemaining trades:")
   for t in remaining_trades:
      ppdebug(t)

   debug("\nTable:")
   renderer = make_tx_renderer(benefits, remaining_trades)
   if args.pretty:
      renderer.render_table()
   else:
      renderer.render_csv()

if __name__ == '__main__':
   exit(main())

